@use 'sass:color';
@use 'sass:math';
@use 'sass:meta';
@use 'sass:string';

/// Remove the unit from a number value
///
/// @param {number} $value
///   The value to strip the value from.
/// @returns {number}
///   The value with the unit stripped from it.
@function -strip-unit($value) {
  @if meta.type-of($value) == number and not math.is-unitless($value) {
    @return $value / ($value * 0 + 1);
  } @else {
    @return $value;
  }
}

/// Generates or reduces a summation of two values.
///
/// @param {string|number|null} $left
///   The left operand for the summation.
/// @param {string|number|null} $right
///   The right operand for the summation.
/// @return {string}
///   The generated or reduced expression for the summation.
@function add($left, $right) {
  @return string.unquote('#{$left} + #{$right}');
}

/// Generates or reduces a subtraction two values.
///
/// @param {string|number|null} $left
///   The left operand for the subtraction.
/// @param {string|number|null} $right
///   The right operand for the subtraction.
/// @return {string}
///   The generated or reduced expression for the subtraction.
@function sub($left, $right) {
  @return string.unquote('#{$left} - #{$right}');
}

/// Generates or reduces a product of two values.
///
/// @param {string|number|null} $left
///   The left operand for the multiplication.
/// @param {string|number|null} $right
///   The right operand for the multiplication.
/// @return {string}
///   The generated or reduced expression for the product.
@function mul($left, $right) {
  @return string.unquote('#{$left} * #{$right}');
}

/// Generates a `calc(...)' expression for a calculation.
///
/// @param {string|number|null} $expression
///   The expression to calculate.
/// @return {string|number}
///   The generated or reduced expression for the calculation.
@function calculate($expression) {
  @return string.unquote('calc(#{$expression})');
}

/// Interpolates between two values.
///
/// @param {string|number|color} $base
///   The base value for the mix operation.
/// @param {string|number|color} $dest
///   The destination value for the mix operation.
/// @param {number} $amount
///   The amount of `$dest' to mix in.
/// @return {string|color}
///   The generated or reduced expression for the mix operation.
@function lerp($base, $dest, $amount: 50%) {
  $amount-decimal: $amount;
  @if math.unit($amount) == '%' {
    $amount-decimal: $amount / 100%;
  }
  @if meta.type-of($base) == color and meta.type-of($dest) == color {
    @return color.mix($dest, $base, $weight: $amount);
  } @else {
    @return calculate(add(mul(1 - $amount-decimal, $base), mul($amount-decimal, $dest)));
  }
}
