@use 'sass:color';
@use 'sass:list';
@use 'sass:map';
@use 'sass:meta';
@use 'utils';

/// Variables
$-var-suffix-hue: '-h';
$-var-suffix-saturation: '-s';
$-var-suffix-lightness: '-l';
$-var-suffix-alpha: '-a';

/// Base Colors
$base-colors: (
  'white': hsl(0deg, 0%, 0%),
  'gray': hsl(0deg, 0%, 50%),
  'black': hsl(0deg, 0%, 100%),
  'red': hsl(0deg, 100%, 50%),
  'yellow': hsl(60deg, 100%, 50%),
  'green': hsl(120deg, 100%, 50%),
  'aqua':  hsl(180deg, 100%, 50%),
  'blue': hsl(240deg, 100%, 50%),
  'fuchsia': hsl(300deg, 100%, 50%),
) !default;

/// Theme colors
$colors: (
  'primary': purple,
  'secondary': cyan,
) !default;

/// Color tints
$color-tints: (
  '100': 80%,
  '200': 50%,
  '300': 30%,
  '400': 15%,
  '500': 0,
  '600': -15%,
  '700': -30%,
  '800': -50%,
  '900': -80%
);

/// All colors combined
$-all-colors: map.merge(
  map.merge(
    ('white': white, 'black': black),
    $base-colors
  ),
  $colors
);

/// Returns the CSS variable name for the
/// hue channel of a defined named color.
///
/// @param {string} $name
///   The name of the color.
/// @returns {string}
///   The variable name.
@function var-name-hue($name) {
  @return utils.var-name($name: #{$name}#{$-var-suffix-hue});
}

/// Returns the CSS variable name for the
/// saturation channel of a defined named color.
///
/// @param {string} $name
///   The name of the color.
/// @returns {string}
///   The variable name.
@function var-name-saturation($name) {
  @return utils.var-name($name: #{$name}#{$-var-suffix-saturation});
}

/// Returns the CSS variable name for the
/// lightness channel of a defined named color.
///
/// @param {string} $name
///   The name of the color.
/// @returns {string}
///   The variable name.
@function var-name-lightness($name) {
  @return utils.var-name($name: #{$name}#{$-var-suffix-lightness});
}

/// Returns the CSS variable name for the
/// alpha channel of a defined named color.
///
/// @param {string} $name
///   The name of the color.
/// @returns {string}
///   The variable name.
@function var-name-alpha($name) {
  @return utils.var-name($name: #{$name}#{$-var-suffix-alpha});
}

/// Returns the `var(...)' color expression for the
/// hue channel of a defined named color.
///
/// @param {string} $name
///   The name of the color.
/// @returns {string}
///   The custom variable expression.
@function read-color-hue($name) {
  @return var(#{var-name-hue($name)});
}

/// Returns the `var(...)' color expression for the
/// saturation channel of a defined named color.
///
/// @param {string} $name
///   The name of the color.
/// @returns {string}
///   The custom variable expression.
@function read-color-saturation($name) {
  @return var(#{var-name-saturation($name)});
}

/// Returns the `var(...)' color expression for the
/// lightness channel of a defined named color.
///
/// @param {string} $name
///   The name of the color.
/// @returns {string}
///   The custom variable expression.
@function read-color-lightness($name) {
  @return var(#{var-name-lightness($name)});
}

/// Returns the `var(...)' color expression for the
/// alpha channel of a defined named color.
///
/// @param {string} $name
///   The name of the color.
/// @returns {string}
///   The custom variable expression.
@function read-color-alpha($name) {
  @return var(#{var-name-alpha($name)});
}

/// Returns the `hsl(...)' color expression for a
/// defined named color.
///
/// @param {string} $name
///   The name of the color.
/// @param {number} $tint
///   (Optional) The amount of tint to be applied.
/// @param {number} $shade
///   (Optional) The amount of shade to be applied.
/// @returns {string}
///   The HSL color expression.
@function read-color-hsl($name, $tint: null, $shade: null) {
  $lightness: read-color-lightness($name);
  @if $tint != null {
    $lightness: utils.lerp($lightness, color.lightness(map.get($-all-colors, 'white')), $amount: $tint);
  } @else if $shade != null {
    $lightness: utils.lerp($lightness, color.lightness(map.get($-all-colors, 'black')), $amount: $shade);
  }
  @return hsl(read-color-hue($name), read-color-saturation($name), $lightness);
}

/// Returns the `hsla(...)' color expression for a
/// defined named color.
///
/// @param {string} $name
///   The name of the color.
/// @param {number} $tint
///   (Optional) The amount of tint to be applied.
/// @param {number} $shade
///   (Optional) The amount of shade to be applied.
/// @returns {string}
///   The HSLA color expression.
@function read-color-hsla($name, $tint: null, $shade: null) {
  $lightness: read-color-lightness($name);
  @if $tint != null {
    $lightness: utils.lerp($lightness, color.lightness(map.get($-all-colors, 'white')), $amount: $tint);
  } @else if $shade != null {
    $lightness: utils.lerp($lightness, color.lightness(map.get($-all-colors, 'black')), $amount: $shade);
  }
  @return hsla(read-color-hue($name), read-color-saturation($name), $lightness, read-color-alpha($name));
}

@mixin rules($vendor-prefix: '') {
  utils.$vendor-prefix: $vendor-prefix;

  @at-root {
    :root {
      @each $name, $color in $-all-colors {
        #{var-name-hue($name)}: #{color.hue($color)};
        #{var-name-saturation($name)}: #{color.saturation($color)};
        #{var-name-lightness($name)}: #{color.lightness($color)};
        #{var-name-alpha($name)}: #{color.alpha($color)};
      }
    }
  }

  @each $name, $color in $-all-colors {
    #{utils.class-name('bg-#{$name}')} {
      background-color: $color;
      background-color: read-color-hsla($name);
    }

    @each $tint-name, $tint-value in $color-tints {
      #{utils.class-name('bg-#{$name}-#{$tint-name}')} {
        @if $tint-value >= 0 {
          background-color: utils.lerp($color, map.get($-all-colors, 'white'), $amount: $tint-value);
          background-color: read-color-hsla($name, $tint: $tint-value);
        } @else {
          background-color: utils.lerp($color, map.get($-all-colors, 'black'), $amount: -1 * $tint-value);
          background-color: read-color-hsla($name, $shade: -1 * $tint-value);
        }
      }
    }
  }
}
