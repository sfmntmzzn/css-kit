@use 'sass:color';
@use 'sass:list';
@use 'sass:map';
@use 'sass:meta';
@use 'utils';

/// Variables
$-var-suffix-hue: '-h';
$-var-suffix-saturation: '-s';
$-var-suffix-lightness: '-l';
$-var-suffix-alpha: '-a';

/// Theme colors
$colors: (
  'primary': blue,
  'secondary': orange,
  'text': black,
  'background': white,
);

/// Returns the CSS variable name for the
/// hue channel of a defined named color.
///
/// @param {string} $name The name of the color.
/// @returns The variable name.
@function var-name-hue($name) {
  @return utils.var-name($name: #{$name}#{$-var-suffix-hue});
}

/// Returns the CSS variable name for the
/// saturation channel of a defined named color.
///
/// @param {string} $name The name of the color.
/// @returns The variable name.
@function var-name-saturation($name) {
  @return utils.var-name($name: #{$name}#{$-var-suffix-saturation});
}

/// Returns the CSS variable name for the
/// lightness channel of a defined named color.
///
/// @param {string} $name The name of the color.
/// @returns The variable name.
@function var-name-lightness($name) {
  @return utils.var-name($name: #{$name}#{$-var-suffix-lightness});
}

/// Returns the CSS variable name for the
/// alpha channel of a defined named color.
///
/// @param {string} $name The name of the color.
/// @returns The variable name.
@function var-name-alpha($name) {
  @return utils.var-name($name: #{$name}#{$-var-suffix-alpha});
}

/// Returns the `var(...)' color expression for the
/// hue channel of a defined named color.
///
/// @param {string} $name The name of the color.
/// @returns The custom variable expression.
@function read-color-hue($name) {
  @return var(#{var-name-hue($name)});
}

/// Returns the `var(...)' color expression for the
/// saturation channel of a defined named color.
///
/// @param {string} $name The name of the color.
/// @returns The custom variable expression.
@function read-color-saturation($name) {
  @return var(#{var-name-saturation($name)});
}

/// Returns the `var(...)' color expression for the
/// lightness channel of a defined named color.
///
/// @param {string} $name The name of the color.
/// @returns The custom variable expression.
@function read-color-lightness($name) {
  @return var(#{var-name-lightness($name)});
}

/// Returns the `var(...)' color expression for the
/// alpha channel of a defined named color.
///
/// @param {string} $name The name of the color.
/// @returns The custom variable expression.
@function read-color-alpha($name) {
  @return var(#{var-name-alpha($name)});
}

/// Returns the `hsl(...)' color expression for a
/// defined named color.
///
/// @param {string} $name The name of the color.
/// @returns The HSL color expression.
@function read-color-hsl($name) {
  @return hsl(
    read-color-hue($name),
    read-color-saturation($name),
    read-color-lightness($name)
  );
}

/// Returns the `hsla(...)' color expression for a
/// defined named color.
///
/// @param {string} $name The name of the color.
/// @returns The HSLA color expression.
@function read-color-hsla($name) {
  @return hsla(
    read-color-hue($name),
    read-color-saturation($name),
    read-color-lightness($name),
    read-color-alpha($name)
  );
}

@mixin rules($vendor-prefix: '') {
  utils.$vendor-prefix: $vendor-prefix;

  @at-root {
    :root {
      @each $name, $color in $colors {
        #{var-name-hue($name)}: #{color.hue($color)};
        #{var-name-saturation($name)}: #{color.saturation($color)};
        #{var-name-lightness($name)}: #{color.lightness($color)};
        #{var-name-alpha($name)}: #{color.alpha($color)};
      }
    }
  }

  @each $name, $color in $colors {
    #{utils.class-name('bg-#{$name}')} {
      background-color: $color;
      background-color: read-color-hsla($name);
    }
  }
}
